import { Contracts } from '../../../../Cookta-shared/src/contracts/contracts';
import {Api} from 'waxen/dist/deorators/api';
import {IHttpCaller} from "waxen/dist/client/IHttpCaller";
import { IShoppingList, ICompletedShoppingItem } from "../../../../Cookta-shared/src/models/shopping-list/shopping-list.interface";

@Api(Contracts.ShoppingList)
export class ShoppingListApi {
    /** <=== Autogenerated callable endpoint ===> */
    public async GetShoppingList(client: IHttpCaller, nextShopping: string): Promise<IShoppingList> {
        return new Promise<IShoppingList>(async (resolve) => {
            const response = await client.GET('/' + `${nextShopping}`);
            response.subscribe(data => {
                resolve(data as IShoppingList)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async SetComplete(client: IHttpCaller, body: { IngredientId: string, complete: boolean }): Promise<IShoppingList> {
        return new Promise<IShoppingList>(async (resolve) => {
            const response = await client.PUT('complete', body);
            response.subscribe(data => {
                resolve(data as IShoppingList)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async SetCanceled(client: IHttpCaller, body: { IngredientId: string, Canceled: boolean }): Promise<IShoppingList> {
        return new Promise<IShoppingList>(async (resolve) => {
            const response = await client.PUT('canceled', body);
            response.subscribe(data => {
                resolve(data as IShoppingList)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async NewShoppingList(client: IHttpCaller, body: { cancelItems: boolean }): Promise<IShoppingList> {
        return new Promise<IShoppingList>(async (resolve) => {
            const response = await client.PUT('new', body);
            response.subscribe(data => {
                resolve(data as IShoppingList)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async SetBoughtQuantity(client: IHttpCaller, body: { Item: ICompletedShoppingItem }): Promise<void> {
        return new Promise<void>(async (resolve) => {
            const response = await client.PUT('qty', body);
            response.subscribe(data => {
                resolve(data as void)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }
}
