import {Api} from 'waxen/dist/deorators/api';
import {Contracts} from 'cookta-shared/src/contracts/contracts';
import {IHttpCaller} from 'waxen/dist/client/IHttpCaller';
import {ISendableFood} from 'cookta-shared/src/models/food/food-sendable.interface';
import {IUpdateFoodRequest} from 'cookta-shared/src/contracts/foods/update-food.request';

@Api(Contracts.Foods)
export class FoodApi {
    /** <=== Autogenerated callable endpoint ===> */
    public async GetPublicFoods(client: IHttpCaller): Promise<ISendableFood[]> {
        return new Promise<ISendableFood[]>(async (resolve) => {
            const response = await client.GET('');
            response.subscribe(data => {
                resolve(data as ISendableFood[])
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async GetPublicFoodsIncremental(client: IHttpCaller, from: number, count: number): Promise<ISendableFood[]> {
        return new Promise<ISendableFood[]>(async (resolve) => {
            const response = await client.GET('/' + `${from}/${count}`);
            response.subscribe(data => {
                resolve(data as ISendableFood[])
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async GetOwnFoods(client: IHttpCaller): Promise<ISendableFood[]> {
        return new Promise<ISendableFood[]>(async (resolve) => {
            const response = await client.GET('own');
            response.subscribe(data => {
                resolve(data as ISendableFood[])
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async GetSubscriptionFoods(client: IHttpCaller): Promise<ISendableFood[]> {
        return new Promise<ISendableFood[]>(async (resolve) => {
            const response = await client.GET('subscription');
            response.subscribe(data => {
                resolve(data as ISendableFood[])
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async GetFamilyFoods(client: IHttpCaller): Promise<ISendableFood[]> {
        return new Promise<ISendableFood[]>(async (resolve) => {
            const response = await client.GET('family');
            response.subscribe(data => {
                resolve(data as ISendableFood[])
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async GetCollectionFoods(client: IHttpCaller): Promise<ISendableFood[]> {
        return new Promise<ISendableFood[]>(async (resolve) => {
            const response = await client.GET('collection');
            response.subscribe(data => {
                resolve(data as ISendableFood[])
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async GetFoodById(client: IHttpCaller, id: string): Promise<ISendableFood> {
        return new Promise<ISendableFood>(async (resolve) => {
            const response = await client.GET('/' + `${id}`);
            response.subscribe(data => {
                resolve(data as ISendableFood)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async GetFoodPageById(client: IHttpCaller, id: string, count: number): Promise<{ food: ISendableFood, recommendations: ISendableFood[] }> {
        return new Promise<{ food: ISendableFood, recommendations: ISendableFood[] }>(async (resolve) => {
            const response = await client.GET('page/' + `${id}/${count}`);
            response.subscribe(data => {
                resolve(data as { food: ISendableFood, recommendations: ISendableFood[] })
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async AddOrUpdateFood(client: IHttpCaller, body: IUpdateFoodRequest): Promise<ISendableFood> {
        return new Promise<ISendableFood>(async (resolve) => {
            const response = await client.POST('', body);
            response.subscribe(data => {
                resolve(data as ISendableFood)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async DeleteFood(client: IHttpCaller, foodId: string): Promise<ISendableFood> {
        return new Promise<ISendableFood>(async (resolve) => {
            const response = await client.DELETE('/' + `${foodId}`);
            response.subscribe(data => {
                resolve(data as ISendableFood)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async UploadImage(client: IHttpCaller, foodVersionId: string, body: void): Promise<void> {
        return new Promise<void>(async (resolve) => {
            const response = await client.POST('image/' + `${foodVersionId}`);
            response.subscribe(data => {
                resolve(data as void)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async DeleteImage(client: IHttpCaller, foodVersionId: string): Promise<void> {
        return new Promise<void>(async (resolve) => {
            const response = await client.DELETE('image/' + `${foodVersionId}`);
            response.subscribe(data => {
                resolve(data as void)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async SearchFoods(client: IHttpCaller, text: string, count: number): Promise<{ results: ISendableFood[] }> {
        return new Promise<{ results: ISendableFood[] }>(async (resolve) => {
            const response = await client.GET('search/' + `${text}/${count}`);
            response.subscribe(data => {
                resolve(data as { results: ISendableFood[] })
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }
}
