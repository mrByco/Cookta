import {Routes} from "../routes";
import {Api} from "waxen/dist/deorators/api";
import { User } from "../models/user.model";
import {IHttpCaller} from "waxen/dist/client/IHttpCaller";

@Api(Routes.todos)
export class TaskApi {
    /** <=== Autogenerated callable endpoint ===> */
    public async Secured(client: IHttpCaller, param1: string): Promise<User> {
        return new Promise<User>(async (resolve) => {
            const response = await client.GET('secured/' + `${param1}`);
            response.subscribe(data => {
                resolve(data as User)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async Fail(client: IHttpCaller): Promise<User> {
        return new Promise<User>(async (resolve) => {
            const response = await client.GET('fail');
            response.subscribe(data => {
                resolve(data as User)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }

    /** <=== Autogenerated callable endpoint ===> */
    public async InternalFail(client: IHttpCaller): Promise<User> {
        return new Promise<User>(async (resolve) => {
            const response = await client.GET('optional');
            response.subscribe(data => {
                resolve(data as User)
            }, (err) => {
                console.error(err);
                resolve(undefined);
            });
        });
    }
}
